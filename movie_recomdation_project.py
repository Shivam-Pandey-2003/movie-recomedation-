# -*- coding: utf-8 -*-
"""movie recomdation project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vcXkMUcAnqnguE01HUOIb5leP6QC_mjo

importing the dependies
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""data collection and preproocessing"""

#loading the data from csv files to a pandas datasets
movies_data = pd.read_csv('/content/movies.csv')

#printing the first 5 data of datsets
movies_data.head()

# numbers of rows and column in dataframe
movies_data.shape

#selecting the relevant feature for recomeddation
selected_feature = ['genres','keywords','tagline','cast','director']
print(selected_feature)

#replacing the null value with null string
for feature in selected_feature:
  movies_data[feature] = movies_data[feature].fillna('')

#combining all the 5 selected features
combined_features = movies_data['genres']+''+movies_data['keywords']+''+movies_data['tagline']+''+movies_data['cast']+''+movies_data['director']

print(combined_features)

vectorizer = TfidfVectorizer()

feature_vector = vectorizer.fit_transform(combined_features)

print(feature_vector)

"""Cosine similarity"""

#getting the similarity score using cosine similarity
similarity = cosine_similarity(feature_vector)

print(similarity)

print(similarity.shape)

#getting the movie name from the user
movie_name = input('enter your favorite movie name:')

#getting the list of all movies
list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match of movie given by the user
find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

#finding the index of movie with title
index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

#getting the list of similar movies
similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

#sorting the movie based on their similarity score
sorted_similar_score = sorted(similarity_score,key = lambda x:x[1],reverse = True)
print(sorted_similar_score)

#print the similar movies based on the index
print('movies suggested for you: \n')
i=1
for movie in sorted_similar_score:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if(i<30):
    print(i,'.',title_from_index)
    i+=1

movie_name = input('enter your favorite movie name:')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_score = sorted(similarity_score,key = lambda x:x[1],reverse = True)

print('movies suggested for you: \n')
i=1
for movie in sorted_similar_score:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if(i<30):
    print(i,'.',title_from_index)
    i+=1